generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  REALTOR
  CLIENT
}

model User {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  
  password    String
  role        Role

  clientProfile   ClientProfile?
  realtorProfile  RealtorProfile?
  adminProfile    AdminProfile?

  clientOffers    Offer[] @relation("ClientOffers")
  realtorOffers   Offer[] @relation("RealtorOffers")
}

model ClientProfile {
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  middleName String? @map("middle_name")
  
  phone     String?  @unique 
  email     String?  @unique 


  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("client_profile")
}

model RealtorProfile {
  firstName String @map("first_name")
  lastName  String @map("last_name")
  middleName String @map("middle_name")

  phone     String   @unique
  email     String   @unique

  commission Float
  
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("realtor_profile")
}

model AdminProfile {
  firstName String @map("first_name")
  lastName  String @map("last_name")

  phone       String  @unique 
  email       String  @unique
  
  // Связь с основной моделью User
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("admin_profile")
}

enum EstateType {
  APARTMENT
  HOUSE
  LAND
}

model Estate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  
  type      EstateType

  city      String?
  street    String?
  house     String?

  apartmentData Apartment?
  houseData     House?
  landData      Land?
  offers    Offer[]

  @@map("estate")
}

model Apartment {
  apartment String?
  floor        Int?
  rooms        Int?
  totalArea    Float?     @map("total_area")
  
  estate      Estate     @relation(fields: [estateId], references: [id], onDelete: Cascade)
  estateId    String     @unique @map("estate_id")

  @@map("apartments")
}

model House {
  floors      Int?
  rooms       Int?
  totalArea   Float?     @map("total_area")
  
  estate      Estate     @relation(fields: [estateId], references: [id], onDelete: Cascade)
  estateId    String     @unique @map("estate_id")

  @@map("houses")
}

model Land {
  totalArea   Float?     @map("total_area")
  coordinates Json?      @map("coordinates")
  
  estate      Estate     @relation(fields: [estateId], references: [id], onDelete: Cascade)
  estateId    String     @unique @map("estate_id")

  @@map("lands")
}

model Offer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  
  price     Int
  
  estate    Estate   @relation(fields: [estateId], references: [id])
  estateId  String   @map("estate_id")
  
  client    User     @relation("ClientOffers", fields: [clientId], references: [id])
  clientId  String   @map("client_id")
  
  realtor   User     @relation("RealtorOffers", fields: [realtorId], references: [id])
  realtorId String   @map("realtor_id")
  
  deals     Deal[]

  @@map("offers")
}

model Deal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  
  offer     Offer    @relation(fields: [offerId], references: [id])
  offerId   String   @map("offer_id")

  @@map("deals")
}


